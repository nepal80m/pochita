/*
 * Copyright IBM Corp. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

'use strict';
const stringify = require('json-stringify-deterministic');
const sortKeysRecursive = require('sort-keys-recursive');
const { Contract } = require('fabric-contract-api');
const { stopCoverage } = require('v8');



class NationalIdentity extends Contract {

    async initLedger(ctx) {
        const nationalIdentities = [

            {
                NIN: "699-526-518-7",
                mobile_number: '+9779851228881',
                face_image: '',
                first_name: 'Asim',
                first_name_devanagari: "असिम",
                middle_name: null,
                middle_name_devanagari: null,
                last_name: 'Nepal',
                last_name_devanagari: "नेपाल",
                date_of_birth: '2000-02-29',
                gender: 'Male',
                marital_status: 'Unmarried',
                academic_qualification: 'Bachelors in Computer Science',
                occupation: 'Student',
                caste: 'Brahmin',
                religion: 'Hindu',
                nationality: 'Nepalese',

                birth_state: 'Bagmati',
                birth_state_devanagari: "बागमती",
                birth_district: 'Kathmandu',
                birth_district_devanagari: "काठमाडौं",
                birth_municipality: 'Kathmandu',
                birth_municipality_devanagari: "काठमाडौं",
                birth_ward_number: 1,
                birth_tole: 'Kathmandu',

                permanent_state: 'Bagmati',
                permanent_state_devanagari: "बागमती",
                permanent_district: 'Kathmandu',
                permanent_district_devanagari: "काठमाडौं",
                permanent_municipality: 'Kathmandu',
                permanent_municipality_devanagari: "काठमाडौं",
                permanent_ward_number: 1,
                permanent_tole: 'Kathmandu',
                permanent_house_number: 1,

                temporary_state: 'Bagmati',
                temporary_district: 'Kathmandu',
                temporary_municipality: 'Kathmandu',
                temporary_ward_number: 1,
                temporary_tole: 'Kathmandu',

                father_first_name: 'Dad',
                father_first_name_devanagari: "दादा",
                father_middle_name: null,
                father_middle_name_devanagari: null,
                father_last_name: 'Nepal',
                father_last_name_devanagari: "नेपाल",
                father_NIN: '456-789-012-3',
                father_nationality: 'Nepalese',

                mother_first_name: 'Mom',
                mother_first_name_devanagari: "ममा",
                mother_middle_name: null,
                mother_middle_name_devanagari: null,
                mother_last_name: 'Poudel',
                mother_last_name_devanagari: "पौडेल",
                mother_NIN: '345-678-901-2',
                mother_nationality: 'Nepalese',

                grandfather_first_name: 'Grand',
                grandfather_middle_name: 'Dad',
                grandfather_last_name: 'Nepal',
                grandfather_nationality: 'Nepalese',
                grandfather_NIN: '234-567-890-1',

                grandmother_first_name: 'Grand',
                grandmother_middle_name: 'Mom',
                grandmother_last_name: 'Nepal',
                grandmother_nationality: 'Nepalese',
                grandmother_NIN: '123-456-789-0',

                spouse_first_name: null,
                spouse_first_name_devanagari: null,
                spouse_middle_name: null,
                spouse_middle_name_devanagari: null,
                spouse_last_name: null,
                spouse_last_name_devanagari: null,
                spouse_NIN: null,
                spouse_nationality: null,

                NID_date_of_issue: '2020-02-29',

            },

        ];
        for (const nationalIdentity of nationalIdentities) {
            nationalIdentity.docType = 'NID';
            nationalIdentities.createdAt = new Date().toISOString();
            nationalIdentities.updatedAt = new Date().toISOString();
            await ctx.stub.putState(
                nationalIdentity.NIN,
                Buffer.from(stringify(nationalIdentity))
            );
        }
    }

    async queryNationalIdentity(ctx, NIN) {
        const nationalIdentityAsBytes = await ctx.stub.getState(NIN); // get the nationalIdentity from chaincode state
        if (!nationalIdentityAsBytes || nationalIdentityAsBytes.length === 0) {
            throw new Error(`National Identity ${NIN} does not exist`);
        }
        return nationalIdentityAsBytes.toString();
    }

    async createNationalIdentity(ctx, NIN, documentDetails) {

        const exists = await this.checkIfNationalIdentityExists(ctx, NIN);
        if (exists) {
            throw new Error(`National identity ${NIN} already exists`);
        }

        const nationalIdentity = JSON.parse(documentDetails);
        nationalIdentity.docType = 'NID';
        nationalIdentity.createdAt = new Date().toISOString();
        nationalIdentity.updatedAt = new Date().toISOString();

        await ctx.stub.putState(NIN, Buffer.from(stringify(nationalIdentity)));
        return JSON.stringify(nationalIdentity)
    }

    async updateNationalIdentity(ctx, NIN, updatedDocumentDetails) {
        const nationalIdentityAsBytes = await ctx.stub.getState(NIN);
        const exists = nationalIdentityAsBytes && nationalIdentityAsBytes.length > 0;

        // const exists = await this.checkIfNationalIdentityExists(ctx, NIN);
        if (!exists) {
            throw new Error(`National identity ${NIN} does not exist`);

        }


        const existingNationalIdentity = JSON.parse(Buffer.from(nationalIdentityAsBytes).toString('utf8'));

        const updatedNationalIdentity = JSON.parse(updatedDocumentDetails)
        updatedDocumentDetails.updatedAt = new Date().toISOString();
        await ctx.stub.putState(NIN, Buffer.from(stringify({ ...existingNationalIdentity, ...updatedNationalIdentity })));
        return JSON.stringify(updatedNationalIdentity)
    }

    async deleteNationalIdentity(ctx, NIN) {
        await ctx.stub.deleteState(NIN);
    }


    async queryAllNationalIdentities(ctx) {
        const startKey = '';
        const endKey = '';
        const allResults = [];

        for await (const { key, value } of ctx.stub.getStateByRange(startKey, endKey)) {
            const strValue = Buffer.from(value).toString('utf8');
            let record;
            try {
                record = JSON.parse(strValue);
            } catch (err) {
                console.log(err);
                record = strValue;
            }

            allResults.push(record);
        }
        return JSON.stringify(allResults);
    }

    async checkIfNationalIdentityExists(ctx, NIN) {
        const nationalIdentityAsBytes = await ctx.stub.getState(NIN);
        return nationalIdentityAsBytes && nationalIdentityAsBytes.length > 0;
    }

    async getLastUpdatedDate(ctx, NIN) {
        const nationalIdentityAsBytes = await ctx.stub.getState(NIN);
        const exists = nationalIdentityAsBytes && nationalIdentityAsBytes.length > 0;

        if (!exists) {
            throw new Error(`National identity ${NIN} does not exist`);
        }

        const existingNationalIdentity = JSON.parse(Buffer.from(nationalIdentityAsBytes).toString('utf8'));
        return existingNationalIdentity.updatedAt;
    }



}

module.exports = NationalIdentity;
